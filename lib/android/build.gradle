import groovy.json.JsonSlurper

// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply plugin: 'base'

buildscript {

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

def reactRepositoryPath = "$rootDir/repo"
def graphQlFilesPath = './xnative/src/main/res/raw'

allprojects {
    repositories {
        google()
        jcenter()

        maven {
            url "$reactRepositoryPath"
        }

    }
}

task removeGraphQlFiles(type: Delete) {
    delete graphQlFilesPath
}

task removeReactArchives(type: Delete) {
  delete reactRepositoryPath
}

clean.dependsOn(removeGraphQlFiles)
clean.dependsOn(removeReactArchives)

task generateReactArchives() {
    subprojects { subproject ->
        apply plugin: 'maven-publish'
        def reactSubprojects = [
            "xnative-rn-svg",
            "xnative-rn-webview",
            "xnative-rn-device-info",
            "xnative-rn-community-netinfo",
            "xnative-rn-community-art",
        ]
        def tcnPackageJson = new JsonSlurper().parseText(file("$rootDir/../../package.json").text)

        if (reactSubprojects.contains(subproject.name)) {
            task generateReactArchive(type: Upload) {
                publishing {
                  repositories.maven {
                    url = "file://${reactRepositoryPath}"
                  }
                  publications {
                    maven(MavenPublication) {
                        groupId 'uk.co.thetimes'
                        artifactId subproject.name
                        version tcnPackageJson.version
                    }
                  }
                }
            }
            generateReactArchives.dependsOn(generateReactArchive)
      }
    }

    task reactNativeCopy(type: Copy) {
        from('../../node_modules/react-native/android')
        into(reactRepositoryPath)
    }

    task hermesCopy {
        def hermesVersion = new JsonSlurper().parseText(file("$rootDir/../../node_modules/hermes-engine/package.json").text).version

        task hermesCopyArchive(type: Copy) {
          from('../../node_modules/hermes-engine/android/hermes-release.aar')
          into("$reactRepositoryPath/com/facebook/hermes/hermes-engine/$hermesVersion")
          rename('hermes-release.aar', "hermes-engine-${hermesVersion}.aar")
        }

        task createHermesPom {
          apply plugin: 'maven-publish'
          description "Generates pom file for Hermes Engine"
          publishing {
            repositories.maven {
              //TODO review by Android team guys, unsure wether this is the right syntax to replace the below line
              //.writeTo("$reactRepositoryPath/com/facebook/hermes/hermes-engine/$hermesVersion/hermes-engine-${hermesVersion}.pom")
              url = "$reactRepositoryPath/com/facebook/hermes/hermes-engine/$hermesVersion/hermes-engine-${hermesVersion}.pom"
            }
            publications {
              maven(MavenPublication) {
                pom {
                    groupId 'com.facebook.hermes'
                    artifactId 'hermes-engine'
                    version hermesVersion
                    packaging 'aar'
                }
              }
            }
          }
        }
        hermesCopy.dependsOn(hermesCopyArchive)
        hermesCopy.dependsOn(createHermesPom)
    }
    //pack the graphql files in the xnative.aar library so they can be reused by the android app
    task graphQlCopy(type: Copy) {
        from('../../packages/provider-queries/src/')
        include "**/*.graphql"
        into(graphQlFilesPath)
    }

    generateReactArchives.dependsOn(hermesCopy)
    generateReactArchives.dependsOn(reactNativeCopy)
    generateReactArchives.dependsOn(graphQlCopy)
}
